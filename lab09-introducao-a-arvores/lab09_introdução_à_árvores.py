# -*- coding: utf-8 -*-
"""LAB09-Introdução à Árvores.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tZhzo7KRqll1KdcXauI4ejb1kTD1M20Z

>**Árvores**

Árvores são estruturas de dados que fornecem um bom tempo de busca de dados e permitem uma fácil inserção de informação também, suprimindo os problemas encontrados em listas ordenadas (fácil busca de informação, dificuldade de inserção) e em listas encadeadas (dificuldade de busca, facilidade de inserção).
Composta por elementos menores, chamados de **Nodos**, possui como aplicação, dentre outras, o sistema de arquivamento que encontramos em múltiplos Sistemas Operacionais.

>**Nodo**

Um nodo é o elemento primário que compõe essa estrutura, que possui como características: 



*   Filhos
*   Pai/Mãe
*   Informação
"""

#Classe Nodo
class Nodo:

  #Init da classe recebe o parente do nó, um valor para ser seu dado, e dois espaços vazios para os nós filhos.
  def __init__(self, dado=0, parente=None):
    self.parente = parente
    self.dado = dado
    self.node_esq = None
    self.node_dir = None
  
  #definição dos getters e setters dos campos
  def getDado(self):
    return self.dado
  
  def setDado(self, valor):
    self.dado = valor
  
  def getNodeEsq(self):
    return self.node_esq
  
  def setNodeEsq(self, novo_nodo):
    self.node_esq = novo_nodo
  
  def getNodeDir(self):
    return self.node_dir
  
  def setNodeDir(self, novo_nodo):
    self.node_dir = novo_nodo

  def getParent(self):
    return self.parente

  def setParent(self, novo_nodo):
    self.parente = novo_nodo

#Classe Árvore

class ArvoreBinaria:
  
  def __init__(self):
    self.raiz = Nodo()
    self.n_nodos = 1

  def insere_esq(self, nodo_arv, nodo_novo):
    nodo_arv.setNodeEsq(nodo_novo)
    nodo_novo.setParent(nodo_arv)

    self.n_nodos += 1
  
  def insere_dir(self, nodo_arv, nodo_novo):
    nodo_arv.setNodeDir(nodo_novo)
    nodo_novo.setParent(nodo_arv)

    self.n_nodos += 1
 
  def preOrdem(self, nodo):
    #1)Visita o nó
    #2)Percorre subarvore Esquerda
    #3)Percorre subarvore Direita
    if nodo is None:
      return print(".")
    print(nodo.getDado())
    self.preOrdem(nodo.getNodeEsq())
    self.preOrdem(nodo.getNodeDir())

  #Chama função de pré-ordem pra árvore existente
  def preOrdemArvore(self):
    self.preOrdem(self.raiz)

  def inOrdem(self, nodo):
    #1)Percorre subarvore Esquerda
    #2)Visita o nó
    #3)Percorre subarvore Direita
    if nodo is None:
      return print(".")
    self.inOrdem(nodo.getNodeEsq())
    print(nodo.getDado())
    self.inOrdem(nodo.getNodeDir())

  #Chama função de inOrdem para árvore existente
  def inOrdemArvore(self):
    self.inOrdem(self.raiz)
  
  def posOrdem(self, nodo):
    #1)Percorre subarvore Esquerda
    #2)Percorre subarvore Direita
    #3)Visita o nó
    if nodo is None:
      return print(".")
    self.posOrdem(nodo.getNodeEsq())
    self.posOrdem(nodo.getNodeDir())
    print(nodo.getDado())

  #Chama função de posOrdem para árvore existente
  def posOrdemArvore(self):
    self.posOrdem(self.raiz)

arvore = ArvoreBinaria()

arvore.insere_esq(arvore.raiz, Nodo(3))

arvore.insere_dir(arvore.raiz, Nodo(5))

arvore.preOrdemArvore()